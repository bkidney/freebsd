#ifndef GZIP_VERIFIER_H
#define GZIP_VERIFIER_H

/* Generated by flatcc 0.3.6-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef GZIP_READER_H
#include "gzip_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"

static int __Gzip_Compress_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __Gzip_Uncompress_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __Gzip_Return_table_verifier(flatcc_table_verifier_descriptor_t *td);
static int __Gzip_Message_table_verifier(flatcc_table_verifier_descriptor_t *td);

static int __Gzip_Data_union_verifier(flatcc_table_verifier_descriptor_t *td, flatbuffers_voffset_t id, uint8_t type)
{
    switch(type) {
    case 1: return flatcc_verify_table_field(td, id, 0, __Gzip_Compress_table_verifier);
    case 2: return flatcc_verify_table_field(td, id, 0, __Gzip_Uncompress_table_verifier);
    case 3: return flatcc_verify_table_field(td, id, 0, __Gzip_Return_table_verifier);
    default: return flatcc_verify_ok;
    }
}

static int __Gzip_Compress_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* fd_in */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* fd_out */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* orignal_name */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 4, 4) /* mtime */)) return ret;
    return flatcc_verify_ok;
}

static inline int Gzip_Compress_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Compress_identifier, &__Gzip_Compress_table_verifier);
}

static inline int Gzip_Compress_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Compress_type_identifier, &__Gzip_Compress_table_verifier);
}

static inline int Gzip_Compress_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__Gzip_Compress_table_verifier);
}

static inline int Gzip_Compress_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__Gzip_Compress_table_verifier);
}

static int __Gzip_Uncompress_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 8, 8) /* fd_in */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 8, 8) /* fd_out */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* filename */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* pre */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 4, 4) /* prelen */)) return ret;
    return flatcc_verify_ok;
}

static inline int Gzip_Uncompress_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Uncompress_identifier, &__Gzip_Uncompress_table_verifier);
}

static inline int Gzip_Uncompress_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Uncompress_type_identifier, &__Gzip_Uncompress_table_verifier);
}

static inline int Gzip_Uncompress_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__Gzip_Uncompress_table_verifier);
}

static inline int Gzip_Uncompress_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__Gzip_Uncompress_table_verifier);
}

static int __Gzip_Return_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* size */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* bytes_read */)) return ret;
    return flatcc_verify_ok;
}

static inline int Gzip_Return_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Return_identifier, &__Gzip_Return_table_verifier);
}

static inline int Gzip_Return_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Return_type_identifier, &__Gzip_Return_table_verifier);
}

static inline int Gzip_Return_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__Gzip_Return_table_verifier);
}

static inline int Gzip_Return_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__Gzip_Return_table_verifier);
}

static int __Gzip_Message_table_verifier(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 0, &__Gzip_Data_union_verifier) /* data */)) return ret;
    return flatcc_verify_ok;
}

static inline int Gzip_Message_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Message_identifier, &__Gzip_Message_table_verifier);
}

static inline int Gzip_Message_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, Gzip_Message_type_identifier, &__Gzip_Message_table_verifier);
}

static inline int Gzip_Message_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &__Gzip_Message_table_verifier);
}

static inline int Gzip_Message_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{ __flatbuffers_thash_write_to_pe(&thash, thash);
  return flatcc_verify_table_as_root(buf, bufsiz, thash ? (const char *)&thash : 0, &__Gzip_Message_table_verifier);
}

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* GZIP_VERIFIER_H */
