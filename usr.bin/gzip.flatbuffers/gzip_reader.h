#ifndef GZIP_READER_H
#define GZIP_READER_H

/* Generated by flatcc 0.3.6-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct Gzip_Compress_table *Gzip_Compress_table_t;
typedef const flatbuffers_uoffset_t *Gzip_Compress_vec_t;
typedef flatbuffers_uoffset_t *Gzip_Compress_mutable_vec_t;
typedef const struct Gzip_Uncompress_table *Gzip_Uncompress_table_t;
typedef const flatbuffers_uoffset_t *Gzip_Uncompress_vec_t;
typedef flatbuffers_uoffset_t *Gzip_Uncompress_mutable_vec_t;
typedef const struct Gzip_Return_table *Gzip_Return_table_t;
typedef const flatbuffers_uoffset_t *Gzip_Return_vec_t;
typedef flatbuffers_uoffset_t *Gzip_Return_mutable_vec_t;
typedef const struct Gzip_Message_table *Gzip_Message_table_t;
typedef const flatbuffers_uoffset_t *Gzip_Message_vec_t;
typedef flatbuffers_uoffset_t *Gzip_Message_mutable_vec_t;



struct Gzip_Compress_table { uint8_t unused__; };

#ifndef Gzip_Compress_identifier
#define Gzip_Compress_identifier flatbuffers_identifier
#endif
#define Gzip_Compress_type_hash ((flatbuffers_thash_t)0x14f06631)
#define Gzip_Compress_type_identifier "\x31\x66\xf0\x14"
static inline size_t Gzip_Compress_vec_len(Gzip_Compress_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Gzip_Compress_table_t Gzip_Compress_vec_at(Gzip_Compress_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Gzip_Compress_table_t, vec, i, 0)
__flatbuffers_table_as_root(Gzip_Compress)

static inline uint64_t Gzip_Compress_fd_in(Gzip_Compress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint64, 0, 0, t)
static inline int Gzip_Compress_fd_in_is_present(Gzip_Compress_table_t t)
__flatbuffers_field_present(0, t)

static inline uint64_t Gzip_Compress_fd_out(Gzip_Compress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint64, 1, 0, t)
static inline int Gzip_Compress_fd_out_is_present(Gzip_Compress_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t Gzip_Compress_orignal_name(Gzip_Compress_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int Gzip_Compress_orignal_name_is_present(Gzip_Compress_table_t t)
__flatbuffers_field_present(2, t)

static inline uint32_t Gzip_Compress_mtime(Gzip_Compress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 3, 0, t)
static inline int Gzip_Compress_mtime_is_present(Gzip_Compress_table_t t)
__flatbuffers_field_present(3, t)


struct Gzip_Uncompress_table { uint8_t unused__; };

#ifndef Gzip_Uncompress_identifier
#define Gzip_Uncompress_identifier flatbuffers_identifier
#endif
#define Gzip_Uncompress_type_hash ((flatbuffers_thash_t)0xccadbdde)
#define Gzip_Uncompress_type_identifier "\xde\xbd\xad\xcc"
static inline size_t Gzip_Uncompress_vec_len(Gzip_Uncompress_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Gzip_Uncompress_table_t Gzip_Uncompress_vec_at(Gzip_Uncompress_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Gzip_Uncompress_table_t, vec, i, 0)
__flatbuffers_table_as_root(Gzip_Uncompress)

static inline uint64_t Gzip_Uncompress_fd_in(Gzip_Uncompress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint64, 0, 0, t)
static inline int Gzip_Uncompress_fd_in_is_present(Gzip_Uncompress_table_t t)
__flatbuffers_field_present(0, t)

static inline uint64_t Gzip_Uncompress_fd_out(Gzip_Uncompress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint64, 1, 0, t)
static inline int Gzip_Uncompress_fd_out_is_present(Gzip_Uncompress_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t Gzip_Uncompress_filename(Gzip_Uncompress_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int Gzip_Uncompress_filename_is_present(Gzip_Uncompress_table_t t)
__flatbuffers_field_present(2, t)

static inline flatbuffers_string_t Gzip_Uncompress_pre(Gzip_Uncompress_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 3, t, 0)
static inline int Gzip_Uncompress_pre_is_present(Gzip_Uncompress_table_t t)
__flatbuffers_field_present(3, t)

static inline uint32_t Gzip_Uncompress_prelen(Gzip_Uncompress_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 4, 0, t)
static inline int Gzip_Uncompress_prelen_is_present(Gzip_Uncompress_table_t t)
__flatbuffers_field_present(4, t)


struct Gzip_Return_table { uint8_t unused__; };

#ifndef Gzip_Return_identifier
#define Gzip_Return_identifier flatbuffers_identifier
#endif
#define Gzip_Return_type_hash ((flatbuffers_thash_t)0x306a719b)
#define Gzip_Return_type_identifier "\x9b\x71\x6a\x30"
static inline size_t Gzip_Return_vec_len(Gzip_Return_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Gzip_Return_table_t Gzip_Return_vec_at(Gzip_Return_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Gzip_Return_table_t, vec, i, 0)
__flatbuffers_table_as_root(Gzip_Return)

static inline uint32_t Gzip_Return_size(Gzip_Return_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 0, 0, t)
static inline int Gzip_Return_size_is_present(Gzip_Return_table_t t)
__flatbuffers_field_present(0, t)

static inline uint32_t Gzip_Return_bytes_read(Gzip_Return_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint32, 1, 0, t)
static inline int Gzip_Return_bytes_read_is_present(Gzip_Return_table_t t)
__flatbuffers_field_present(1, t)

typedef uint8_t Gzip_Data_union_type_t;
__flatbuffers_define_integer_type(Gzip_Data, Gzip_Data_union_type_t, 8)
#define Gzip_Data_NONE ((Gzip_Data_union_type_t)0U)
#define Gzip_Data_Compress ((Gzip_Data_union_type_t)1U)
#define Gzip_Data_Uncompress ((Gzip_Data_union_type_t)2U)
#define Gzip_Data_Return ((Gzip_Data_union_type_t)3U)

static inline const char *Gzip_Data_type_name(Gzip_Data_union_type_t type)
{
    switch (type) {
    case Gzip_Data_NONE: return "NONE";
    case Gzip_Data_Compress: return "Compress";
    case Gzip_Data_Uncompress: return "Uncompress";
    case Gzip_Data_Return: return "Return";
    default: return "";
    }
}


struct Gzip_Message_table { uint8_t unused__; };

#ifndef Gzip_Message_identifier
#define Gzip_Message_identifier flatbuffers_identifier
#endif
#define Gzip_Message_type_hash ((flatbuffers_thash_t)0xb2c74978)
#define Gzip_Message_type_identifier "\x78\x49\xc7\xb2"
static inline size_t Gzip_Message_vec_len(Gzip_Message_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Gzip_Message_table_t Gzip_Message_vec_at(Gzip_Message_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Gzip_Message_table_t, vec, i, 0)
__flatbuffers_table_as_root(Gzip_Message)

static inline Gzip_Data_union_type_t Gzip_Message_data_type(Gzip_Message_table_t t)
__flatbuffers_scalar_field(Gzip_Data, 0, 0, t)
static inline flatbuffers_generic_table_t Gzip_Message_data(Gzip_Message_table_t t)
__flatbuffers_table_field(flatbuffers_generic_table_t, 1, t, 0)
static inline int Gzip_Message_data_is_present(Gzip_Message_table_t t)
__flatbuffers_field_present(0, t)


#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* GZIP_READER_H */
